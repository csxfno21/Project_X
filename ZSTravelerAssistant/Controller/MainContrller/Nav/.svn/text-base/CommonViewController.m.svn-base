//
//  CommonViewController.m
//  ZSTravelerAssistant
//
//  Created by szmap on 13-8-14.
//  Copyright (c) 2013å¹´ com.szmap. All rights reserved.
//

#import "CommonViewController.h"

#define TABLEVIEW_TAG               100
@interface CommonViewController ()

@end

@implementation CommonViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self)
    {

    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    CommonTableViewOne *tmptableViewOne = [[CommonTableViewOne alloc]initWithFrame:CGRectMake(0, 0, 320, self.mScrollView.frame.size.height)];
    if (!iPhone5)
    {
        tmptableViewOne.frame = CGRectMake(0, 0, 320, 372 - 5);
    }
    tmptableViewOne.tag = TABLEVIEW_TAG;
    tmptableViewOne.commonDelegate = self;
    self.tableViewOne = tmptableViewOne;
    [self.mScrollView addSubview:tmptableViewOne];
    SAFERELEASE(tmptableViewOne)
    
    
    CommonTableViewTwo *tmptableViewTwo = [[CommonTableViewTwo alloc]initWithFrame:CGRectMake(320, 45, 320, self.mScrollView.frame.size.height - 45)];
    if (!iPhone5)
    {
        tmptableViewTwo.frame = CGRectMake(320, 50, 320, 372 - 56);
    }
    tmptableViewTwo.tag = TABLEVIEW_TAG + 1;
    tmptableViewTwo.commonDelegate = self;
    self.tableViewTwo = tmptableViewTwo;
    [self.mScrollView addSubview:tmptableViewTwo];
    SAFERELEASE(tmptableViewTwo)
    
    AKSegmentedControl *segmentedControl = [[AKSegmentedControl alloc] initWithFrame:CGRectMake(350.0, 8, 260.0, 32.0)];
    [segmentedControl setDelegate:self];
    [self setupSegmentedControl:segmentedControl];
    [self.mScrollView addSubview:segmentedControl];
    
    SAFERELEASE(segmentedControl)
    
    CommonTableViewOne *tmptableViewThree = [[CommonTableViewOne alloc]initWithFrame:CGRectMake(640, 0, 320, self.mScrollView.frame.size.height)];
    if (!iPhone5)
    {
        tmptableViewThree.frame = CGRectMake(640, 0, 320, 372 - 5);
    }
    tmptableViewThree.tag = TABLEVIEW_TAG + 2;
    tmptableViewThree.commonDelegate = self;
    self.tableViewThree = tmptableViewThree;
    [self.mScrollView addSubview:tmptableViewThree];
    SAFERELEASE(tmptableViewThree)

    
    
    [self.tabBarItemOne setTitle:[Language stringWithName:COMMON_TABBAR_ITEM_ONE]];
    [self.tabBarItemTwo setTitle:[Language stringWithName:COMMON_TABBAR_ITEM_TWO]];
    [self.tabBarItemThree setTitle:[Language stringWithName:COMMON_TABBAR_ITEM_THREE]];
    
    self.tabBar.delegate = self;
    self.tabBar.selectedItem = self.tabBarItemOne;
    self.mScrollView.contentSize = CGSizeMake(320 * 3, 0);
    self.mScrollView.delegate = self;
    self.mScrollView.pagingEnabled = YES;
    
    [self.topTitleLabel setText:[Language stringWithName:ROOT_PAGE_FIVE_TITLE]];
    [self.backBtn setImage:[UIImage imageNamed:@"back.png"] forState:UIControlStateNormal];
    [self.backBtn setImage:[UIImage imageNamed:@"back-on.png"] forState:UIControlStateHighlighted];
    [self.backLabel setText:[Language stringWithName:BACK]];
    
    
    
    if(self.data)
    {
        NSMutableArray *parkData = [[[NSMutableArray alloc] init] autorelease];
        NSMutableDictionary *stationData = [[[NSMutableDictionary alloc] init] autorelease];
        NSMutableArray *sightSee = [[NSMutableArray alloc] init];
        NSMutableArray *spotBus = [[NSMutableArray alloc] init];
        NSMutableArray *exportData = [[[NSMutableArray alloc] init] autorelease];
        for (ZS_CommonNav_entity *entity in self.data)
        {
            if(entity.NavType.intValue == POI_PARK)
            {
                [parkData addObject:entity];
            }
            else if(entity.NavType.intValue == POI_SIGHT_SEE)
            {
                [sightSee addObject:entity];
            }
            else if(entity.NavType.intValue == POI_SPOT_BUS)
            {
                [spotBus addObject:entity];
            }
            else if(entity.NavType.intValue == POI_EXPORT_L || entity.NavType.intValue == POI_EXPORT || entity.NavType.intValue == POI_ENTRANCE)
            {
                [exportData addObject:entity];
            }
        }
        
        self.tableViewOne.data = parkData;
        
        [stationData setObject:sightSee forKey:INTTOOBJ(TOUR_BUS_TYPE)];
        [stationData setObject:spotBus forKey:INTTOOBJ(SPOT_BUS_TYPE)];
        SAFERELEASE(sightSee)
        SAFERELEASE(spotBus)
        self.tableViewTwo.data = stationData;
        
        self.tableViewThree.data = exportData;
    }
}

- (IBAction)backAction:(id)sender
{
    [self.navigationController popViewControllerAnimated:YES];
}
#pragma mark- tabbar delegate
-(void)tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item
{
    NSInteger index = item.tag;
    NSLog(@"item.tag= %d", item.tag);
    CGPoint newPoint = CGPointMake(index * 320, 0);
    [self.mScrollView setContentOffset:newPoint animated:YES];
}

#pragma mark- mScrollview delegate
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView
{
    float offsetx = scrollView.contentOffset.x;
    int page = offsetx / 320;
    if(page == 0)self.tabBar.selectedItem = self.tabBarItemOne;
    else if(page == 1)self.tabBar.selectedItem = self.tabBarItemTwo;
    else if(page == 2)self.tabBar.selectedItem = self.tabBarItemThree;
}
-(void)segmentedViewController:(AKSegmentedControl *)segmentedControl touchedAtIndex:(NSUInteger)index
{
//    [self.tableViewTwo scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:0] atScrollPosition:UITableViewScrollPositionTop animated:YES];
    switch (index)
    {
        case 0:
        {
            self.tableViewTwo.busType = TOUR_BUS_TYPE;
            break;
        }
        case 1:
        {
            self.tableViewTwo.busType = SPOT_BUS_TYPE;
            break;
        }
        default:
            break;
    }
    [self.tableViewTwo reloadData];
}

- (void)setupSegmentedControl:(AKSegmentedControl*)control
{
    UIImage *backgroundImage = [[UIImage imageNamed:@"segmented-bg.png"] resizableImageWithCapInsets:UIEdgeInsetsMake(10.0, 10.0, 10.0, 10.0)];
    [control setBackgroundImage:backgroundImage];
    [control setContentEdgeInsets:UIEdgeInsetsMake(2.0, 2.0, 3.0, 2.0)];
    [control setAutoresizingMask:UIViewAutoresizingFlexibleRightMargin|UIViewAutoresizingFlexibleWidth|UIViewAutoresizingFlexibleBottomMargin];
    
    [control setSeparatorImage:[UIImage imageNamed:@"segmented-separator.png"]];
    
    UIImage *buttonBackgroundImagePressedLeft = [[UIImage imageNamed:@"segmented-bg-pressed-left.png"]
                                                 resizableImageWithCapInsets:UIEdgeInsetsMake(0.0, 4.0, 0.0, 1.0)];
    //    UIImage *buttonBackgroundImagePressedCenter = [[UIImage imageNamed:@"segmented-bg-pressed-center.png"]
    //                                                   resizableImageWithCapInsets:UIEdgeInsetsMake(0.0, 4.0, 0.0, 1.0)];
    UIImage *buttonBackgroundImagePressedRight = [[UIImage imageNamed:@"segmented-bg-pressed-right.png"]
                                                  resizableImageWithCapInsets:UIEdgeInsetsMake(0.0, 1.0, 0.0, 4.0)];
    
    // Button 1
    UIButton *buttonSocial = [[[UIButton alloc] init] autorelease];
    [buttonSocial setTitle:[Language stringWithName:TOUR_BUS] forState:UIControlStateNormal];
    [buttonSocial setTitleColor:[UIColor colorWithRed:82.0/255.0 green:113.0/255.0 blue:131.0/255.0 alpha:1.0] forState:UIControlStateNormal];
    [buttonSocial setTitleShadowColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [buttonSocial.titleLabel setShadowOffset:CGSizeMake(0.0, 1.0)];
    [buttonSocial.titleLabel setFont:[UIFont fontWithName:@"HelveticaNeue-Bold" size:15.0]];
    [buttonSocial setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 5.0, 0.0, 0.0)];
    
    //    UIImage *buttonSocialImageNormal = [UIImage imageNamed:@"social-icon.png"];
    [buttonSocial setBackgroundImage:buttonBackgroundImagePressedLeft forState:UIControlStateHighlighted];
    [buttonSocial setBackgroundImage:buttonBackgroundImagePressedLeft forState:UIControlStateSelected];
    [buttonSocial setBackgroundImage:buttonBackgroundImagePressedLeft forState:(UIControlStateHighlighted|UIControlStateSelected)];
    //    [buttonSocial setImage:buttonSocialImageNormal forState:UIControlStateNormal];
    //    [buttonSocial setImage:buttonSocialImageNormal forState:UIControlStateSelected];
    //    [buttonSocial setImage:buttonSocialImageNormal forState:UIControlStateHighlighted];
    //    [buttonSocial setImage:buttonSocialImageNormal forState:(UIControlStateHighlighted|UIControlStateSelected)];
    
    // Button 2
    UIButton *buttonStar = [[[UIButton alloc] init] autorelease];
    
    [buttonStar setTitle:[Language stringWithName:SPOT_BUS] forState:UIControlStateNormal];
    [buttonStar setTitleColor:[UIColor colorWithRed:82.0/255.0 green:113.0/255.0 blue:131.0/255.0 alpha:1.0] forState:UIControlStateNormal];
    [buttonStar setTitleShadowColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [buttonStar.titleLabel setShadowOffset:CGSizeMake(0.0, 1.0)];
    [buttonStar.titleLabel setFont:[UIFont fontWithName:@"HelveticaNeue-Bold" size:15.0]];
    [buttonStar setTitleEdgeInsets:UIEdgeInsetsMake(0.0, 5.0, 0.0, 0.0)];
    
    [buttonStar setBackgroundImage:buttonBackgroundImagePressedRight forState:UIControlStateHighlighted];
    [buttonStar setBackgroundImage:buttonBackgroundImagePressedRight forState:UIControlStateSelected];
    [buttonStar setBackgroundImage:buttonBackgroundImagePressedRight forState:(UIControlStateHighlighted|UIControlStateSelected)];
    //    [buttonStar setImage:buttonStarImageNormal forState:UIControlStateNormal];
    //    [buttonStar setImage:buttonStarImageNormal forState:UIControlStateSelected];
    //    [buttonStar setImage:buttonStarImageNormal forState:UIControlStateHighlighted];
    //    [buttonStar setImage:buttonStarImageNormal forState:(UIControlStateHighlighted|UIControlStateSelected)];
    
    [control setButtonsArray:@[buttonSocial, buttonStar]];
}

#pragma mark - commontableViewAction
- (void)commontableViewAction:(int)index withAction:(COMMON_NAV_TYPE)action withEntity:(id)entity
{
    selectEntity = entity;
    switch (action)
    {
        case COMMON_NAV_TYPE_LOCATION:
        {
            if (!entity)
            {
                return;
            }
            ZS_CommonNav_entity *commonEntity = entity;
            AGSPoint *point = [AGSPoint pointWithX:[commonEntity.NavLng doubleValue] y:[commonEntity.NavLat doubleValue] spatialReference:[AGSSpatialReference spatialReferenceWithWKID:4326 WKT:nil]];
            [[MapManager sharedInstanced] didShowCallout2POI:commonEntity.NavTitle withPoint:point];
            [self.navigationController popViewControllerAnimated:YES];
            break;
        }
        case COMMON_NAV_TYPE_HERE:
        {
            // å°è¿éå»
            if (!entity)
            {
                return;
            }
                        
            ZS_CommonNav_entity *commonEntity = entity;
            CGFloat yHeight = 300.0f;
            CGFloat xWidth = self.view.bounds.size.width - 15.0f;
            CGFloat yOffset = (self.view.bounds.size.height - yHeight)/2.0f;
            RouteNavPopView *popView = [RouteNavPopView instanceRouteNavPopView];
            popView.frame = CGRectMake(15, yOffset, xWidth, yHeight);
            [popView setTitleText:commonEntity.NavTitle];
            popView.delegate = self;
            [popView show];
            break;
        }
        default:
            break;
    }
}

- (void)commonItemDidSelected:(int)index withBusType:(BUS_TYPE)busType withType:(COMMON_NAV_TYPE)action withEntity:(id)entiyty
{
    selectEntity = entiyty;
    switch (action)
    {
        case COMMON_NAV_TYPE_LOCATION:
        {
            if (!entiyty)
            {
                return;
            }
            ZS_CommonNav_entity *commonEntity = entiyty;
            AGSPoint *point = [AGSPoint pointWithX:[commonEntity.NavLng doubleValue] y:[commonEntity.NavLat doubleValue] spatialReference:[AGSSpatialReference spatialReferenceWithWKID:4326 WKT:nil]];
            [[MapManager sharedInstanced] didShowCallout2POI:commonEntity.NavTitle withPoint:point];
            [self.navigationController popViewControllerAnimated:YES];
            break;
        }
        case COMMON_NAV_TYPE_HERE:
        {
             // å°è¿éå»
            switch (busType)
            {
                case TOUR_BUS_TYPE:
                {
                    ZS_CommonNav_entity *commonEntity = entiyty;
                    CGFloat xWidth = self.view.bounds.size.width - 30.f;
                    CGFloat yHeight = 300.0f;
                    CGFloat yOffset = (self.view.bounds.size.height - yHeight)/2.0f;
                    RouteNavPopView *popView = [RouteNavPopView instanceRouteNavPopView];
                    popView.frame = CGRectMake(15, yOffset, xWidth, yHeight);
                    [popView setTitleText:commonEntity.NavTitle];
                    popView.delegate = self;
                    [popView show];

                    break;
                }
                case SPOT_BUS_TYPE:
                {
                    ZS_CommonNav_entity *commonEntity = entiyty;
                    CGFloat xWidth = self.view.bounds.size.width - 30.f;
                    CGFloat yHeight = 300.0f;
                    CGFloat yOffset = (self.view.bounds.size.height - yHeight)/2.0f;
                    RouteNavPopView *popView = [RouteNavPopView instanceRouteNavPopView];
                    popView.frame = CGRectMake(15, yOffset, xWidth, yHeight);
                    [popView setTitleText:commonEntity.NavTitle];
                    popView.delegate = self;
                    [popView show];
                    break;
                }
                default:
                    break;
            }

                        break;
        }
        default:
            break;
    }
}

-(void)routeNavAction:(int)index withType:(int)type
{
    BOOL isSimulation = type;
    NAV_TYPE nav_type = (NAV_TYPE)index;
    
    PoiPoint *poiPoint = [PoiPoint pointWithName:selectEntity.NavTitle withLongitude:selectEntity.NavLng.doubleValue withLatitude:selectEntity.NavLat.doubleValue withPoiID:selectEntity.NavIID.intValue];
    [[MapManager sharedInstanced] startNavByOne:poiPoint withType:nav_type simulation:isSimulation withBarriers:@""];

    [self.navigationController popViewControllerAnimated:YES];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)dealloc {

    [_topTitleImgView release];
    [_topTitleLabel release];
    [_backBtn release];
    [_backLabel release];
    [_tabBar release];
    [_tabBarItemOne release];
    [_tabBarItemTwo release];
    [_tabBarItemThree release];
    [_mScrollView release];
    [super dealloc];
}
- (void)viewDidUnload {
    [self setTopTitleImgView:nil];
    [self setTopTitleLabel:nil];
    [self setBackBtn:nil];
    [self setBackLabel:nil];
    [self setTabBar:nil];
    [self setTabBarItemOne:nil];
    [self setTabBarItemTwo:nil];
    [self setTabBarItemThree:nil];
    [self setMScrollView:nil];
    [super viewDidUnload];
}
@end
